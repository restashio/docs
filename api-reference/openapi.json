{
  "openapi": "3.1.0",
  "info": {
    "title": "Restash API",
    "description": "Restash is the global storage platform for developers.",
    "license": {
      "name": "AGPL-3.0 license",
      "url": "https://www.gnu.org/licenses/agpl-3.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.restash.io",
      "description": "Production API server"
    },
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/files/retrieve": {
      "get": {
        "description": "Returns file metadata for a given file.",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "The ID of the file to retrieve. Must provide either key or id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": false,
            "in": "query",
            "description": "The key of the file to retrieve. Must provide either key or id.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "source": "import { Restash } from \"restash\";\n\nconst restash = new Restash(\"sk_123456789\");\n\nawait restash.files.retrieve({ id: \"file_id\" });"
          }
        ],
        "responses": {
          "200": {
            "description": "The file metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "File": {
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "required": ["id", "createdAt", "updatedAt", "key", "url", "size", "contentType"],
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the file",
                "type": "string"
              },
              "createdAt": {
                "description": "The date and time the file was created",
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "description": "The date and time the file was last updated",
                "type": "string",
                "format": "date-time"
              },
              "key": {
                "description": "The key of the file. A human readable identifier for the file. You might have a file inside a folder, and the key would be the path to that file. For example `folder/file.txt`.",
                "type": "string"
              },
              "url": {
                "description": "The URL of the file. Can be used to access the file directly.",
                "type": "string"
              },
              "size": {
                "description": "The size of the file in bytes",
                "type": "number",
                "format": "int64"
              },
              "contentType": {
                "description": "The content type of the file",
                "type": "string"
              }
            }
          }
        }
      },
      "Error400": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "description": "A short code indicating what went wrong.",
                "type": "string",
                "enum": ["bad_request"]
              },
              "message": {
                "description": "A human readable message explaining what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "Error401": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "description": "A short code indicating what went wrong.",
                "type": "string",
                "enum": ["unauthorized"]
              },
              "message": {
                "description": "A human readable message explaining what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "Error404": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "description": "A short code indicating what went wrong.",
                "type": "string",
                "enum": ["not_found"]
              },
              "message": {
                "description": "A human readable message explaining what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "Error429": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "description": "A short code indicating what went wrong.",
                "type": "string",
                "enum": ["rate_limit_exceeded"]
              },
              "message": {
                "description": "A human readable message explaining what went wrong.",
                "type": "string"
              }
            }
          }
        }
      },
      "Error500": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "description": "A short code indicating what went wrong.",
                "type": "string",
                "enum": ["internal_server_error"]
              },
              "message": {
                "description": "A human readable message explaining what went wrong.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}